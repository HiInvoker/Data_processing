1.导入pandas模块

import pandas as pd

2.从同一个目录下面读取文件

food = pd.read_csv('food_info.csv')
print(type(food))
>>>DataFrame
print(food.dtypes)
>>>int64
   float
	 object  #字符串

print(help(pd.read_csv()))
#善用help（）函数

3.取前几条和后几条数据

first_rows = food.head()
#默认取出前5条数据

print(type(first_rows))
>>>DataFrame
#表明其数据的类型是不变的

food.head(3)
#取出前3条数据

food.tail(3)
#取出后3条数据

print(food.columns)
#显示所有的列名（数据的第一行，但是用food.head()取出来的数据不包含这一行）

print(food.shape)

4.取数据
#iloc只会用行号来选择，loc可用string做索引
food.loc[0]
#取出行号为0的！一行！的数据

#切片
food.loc[3:6]
#3开始，6结束，包含6，取出了编号为3到6的这4行数据

#列取数据（利用列名（第一行的值））
ndb_col = food['NBD_No']

#取几列
columns = ['Zinc_(mg)', 'Copper_(mg)']
Zinc_Copper = food[columns]

#取几列的应用：找到以g结尾的列名（第一行中）
col_names = food.columns.tolist()
                          #将前面的得到的所有的列名的数据做成列表,数据结构为list

print(col_names)
gram_columns = []
for c in col_names:
    if c.endswith('(g)'):
		gram_columns.append(c)
    print(gram_columns)

gram_df = food_info[gram_columns]
print(gram_df.head(3))

5.增加列（要确保增加的数据的shape符合要求，即要数据的行数相同）
iron_g = food["Iron_(mg)"] / 1000

food['iron_(g)'] = iron_g

food_ewg = []
for c in food.columns:
    if c endswith("(g)"):
        food_ewg.append(c)
print(food_ewg)
#显示所有由g结尾的列


6.求一列中的最大值,平均值,最小值
max_calories = food['Energ_Kcal'].max()
                                 .mean()
                                 .min()

7.排序
food.sort_values('Sodium_(mg)', inplace = True, ascending = False)
                  指定那一列                              默认为升序。


8.
titanic_s = pd.read_csv('titanic_train.csv')
titanic_s.head()

age = titanic_s['Age']
#取出‘age’这一列的数据

print(age.loc[0:10])

age_is_null = pd.isnull(age)
              age.isnull()
得到age这一列的数据是不是nan的bool值
age_null_true = age[age_is_null]
print(age_null_true)
age_null_len = len(age_null_true)

9.计算平均年龄：

#如不处理缺失值的后果：
mean_age = sum(titanic_s['Age'])/len(titanic_s['Age'])
print(mean_age)
>>>nan

#去掉缺失值：
good_ages = titanic_s['Age'][age_is_null == False]
print(good_ages)

correct_mean_age = sum(good_ages) / len(good_ages)
#应用现有函数：

correct_mean_age = titanic_s['Age'].mean()

10.显示不同数据之间的对应关系：(如仓位等级和价格)

passenger_classes = [1,2,3]
fares_by_class = {}
for this_class in passenger_classes:
    pclass_rows = titanic_s[titanic_s['Pclass'] == this_class]
    #取出对应的船舱等级的数据
    pclass_fares = pclass_rows['Fare']
    #找出该数据样本的船费，生成列表
    pclass_for_class = pclass_fares.mean()
    #计算出该仓位的平均船费
    fares_by_class[this_class] = pclass_for_class
    #加入字典中
print(fares_by_class)

#pandas达到类似目的：
passenger_survival = titanic_s.pivot_table(index = 'Pclass', values = 'Fare', aggfunc = np.mean)
                                                 显示index与values的关系， aggfunc为可选项 可为np.sum
print(passenger_survival)

#显示一个量与两个量之间的关系：
port_stats = titanic_s.pivot_table(index = 'Embarked', values = ['Fare', 'Survived'], aggfunc = np.sum)
print(port_stats)

11.缺值处理
drop_na_columns = titanic_s.dropna(axis = 1) #删除列,一般不会这么做

new_titanic_s = titanic_s.dropna(axis = 0, subset = ['Age','Sex'])
                                  如果'age' 或者 'sex'有缺失，那么就会删除这一条数据（行）

12.定位到具体值
row_index_83_age = titanic_s.loc[83, 'Age']

13.在数据排序之后，将index也重新排序
new_titanic_s = titanic_s.sort_values('Age', ascending = False)
titanic_reindexed = new_titanic_s.reset_index(drop = True)
                                              原来顺序的不要了
titanic_reindexed.loc[0:10]

14.自定义函数实现各种想要达到的操作
#显示第一百行数据
def hundredth_row(column):
    hundredth_item = column.loc[99]
    return hundredth_item

hundredth_row = titanic_s.apply(hundredth_row)
                          利用apply函数
print(hundredth_row)

#找出每个列缺失数据的个数
def n_n_count(column):
    column_null = pd.isnull(column)
    null = column[column_null]
    return len(null)

column_null_count = t_s.apply(n_n_count)
print(column_null_count)

#将年龄按是否未成年和nan离散化：
def is_minor(row):
    if row['Age'] < 18:
        return True
    else:
        return False

minors = titan_s.apply(is_minor, axis = 1)

def g_age_label(row):
    age = row['Age']
    if pd.isnull(age):
        return 'Unknown'
    elif age < 18:
        return 'minor'
    else:
        return 'adult'
age_labels = titan_s.apply(g_age_label, axis = 1)
age_labels

#将age_label添加到DataFrame中，并显示age_label和survived的关系
titan_s['age_lable'] = age_labels
age_group_survival = titan_s.pivot_table(index = 'age_lable', values = 'Survived')
age_group_survival

#15.对电影的评分
fg = pd.read_csv('fandango_score_comparison.csv')
series_film = fg['FILM']
print(type(series_film))
#取得电影名字的数据，此处为Series数据类型
print(series_film.loc[0:5])

film_names = series_film.values
print(type(film_names))
#将Series的数据变成ndarray，得到电影的名字的ndarray
#也可以先生成list：film_names = series_film.tolist() 此时film_names 的类型为list
#然后在用film_names = np.array(film_names) 变成ndarray

series_rt = fg['RottenTomatoes']
rt_scores = series_rt.values
print(rt_scores)
print(type(rt_scores))
#取得烂番茄网对于电影的所有评分（ndarray）

series_film = fg['FILM']
series_rt = fg['RottenTomatoes']
rt_score = series_rt.values

series_custom = Series(rt_score, index = film_names)
#将电影名作为索引，一个网站的评分作为值

#！！！！！！！！！！！！！！！！！！！！！！！！！！！DataFrame <-- Series <-- ndarray

#16.排序
original_index = series_custom.index.tolist()
#将series_custom的index（即电影名）转换成列表的形式

sorted_index = sorted(original_index)
#按照字母顺序排列

sorted_by_index = series_custom.reindex(sorted_index)
#按照字母顺序排列

sc2 = series_custom.sort_index()
#按照index排序

sc3 = series_custom.sort_values()
#按照值排序

#17.两个Series相加等操作

print(np.add(series_custom, series_custom))

np.min(series_custom)
np.max(series_custom)
np.mean(series_custom)


#18.计算两个机构对同一个电影的平均分

rt_critics = Series(fg['RottenTomatoes'].values, index = fg['FILM'])    #生成新的Series的时候值需要ndarray, index为Series
rt_users = Series(fg['RottenTomatoes_User'].values, index = fg['FILM'])
rt_mean = (rt_critics + rt_users) / 2

#19.用series 做索引操作

fg_films = fg.set_index('FILM', drop = False)
                                不丢弃原来的
#此时'FILM'是索引
print(fg_films.index)

#利用string做切片操作

fg_films.loc['Avengers: Age of Ultron (2015)' : 'Ant-Man (2015)']
fg_films['Avengers: Age of Ultron (2015)' : 'Ant-Man (2015)']

#20.

import numpy as np

# returns the data types as a Series
types = fandango_films.dtypes
#print types
# filter data types to just floats, index attributes returns just column names
float_columns = types[types.values == 'float64'].index
# use bracket notation to filter columns to just float columns
float_df = fandango_films[float_columns]
#print float_df
# `x` is a Series object representing a column
deviations = float_df.apply(lambda x: np.std(x))
                        #利用apply函数将数据标准化
print(deviations)
